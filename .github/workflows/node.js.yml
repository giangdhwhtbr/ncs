# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # - name: Set Backend Environment Variables
    #   run: |
    #     echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> $GITHUB_ENV
    #     echo "NODE_ENV=test" >> $GITHUB_ENV
    #     echo "JWT_SECRET=jwtsecret" >> $GITHUB_ENV
    #     echo "JWT_ACCESS_EXPIRATION_MINUTES=30" >> $GITHUB_ENV
    #     echo "JWT_REFRESH_EXPIRATION_DAYS=30" >> $GITHUB_ENV
    #     echo "JWT_RESET_PASSWORD_EXPIRATION_MINUTES=10" >> $GITHUB_ENV
    #     echo "JWT_VERIFY_EMAIL_EXPIRATION_MINUTES=10" >> $GITHUB_ENV
    #     echo "ADMIN_NAME=admin" >> $GITHUB_ENV
    #     echo "ADMIN_EMAIL=admin@localhost.dev" >> $GITHUB_ENV
    #     echo "ADMIN_PASSWORD=Admin@123" >> $GITHUB_ENV

    # - name: Test backend
    #   working-directory: ./backend
    #   run: |
    #     yarn install
    #     yarn test

    - name: Set Frontend Environment Variables
      run: |
        echo "VITE_REACT_APP_API_URL=http://${{ secrets.DEPLOY_HOST }}/api/v1" >> $GITHUB_ENV

    - name: Test frontend
      working-directory: ./frontend
      run: |
        yarn install
        yarn test

    - name: Build frontend
      working-directory: ./frontend
      run: |
        yarn build
        echo "Frontend build complete"

    - name: Upload frontend build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./frontend/build

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Run deploy only after the build job succeeds
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download frontend build artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./frontend/build

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}

    - name: Copy frontend build to EC2
      run: |
          scp -o StrictHostKeyChecking=no -r ./frontend/build ${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_HOST }}:/tmp/frontend-build

    - name: Deploy to EC2 and Restart Services
      run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            # Select correct nvm version
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

            nvm use 20

            # Backend Deployment
            cd ${{ secrets.DEPLOY_TARGET }}
            git pull origin master
            cd ./backend
            yarn install
            pm2 restart app

            # Frontend Deployment
            sudo rm -rf /usr/share/nginx/html/*
            sudo cp -r /tmp/frontend-build/* /usr/share/nginx/html
            rm -rf /tmp/frontend-build  # Clean up after copying
          EOF
